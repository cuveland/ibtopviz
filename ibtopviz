#!/usr/bin/env python3
# coding: utf-8
#
# Draw an InfiniBand network topology using graphviz
#
# 2020-03-17 Jan de Cuveland <cuveland@compeng.uni-frankfurt.de>
# 2020 Lo√Øs Taulelle <lois.taulelle @ ens-lyon.fr>, SPDX-License-Identifier: BSD-2-Clause

"""
iptopviz
Usage:
    iptopviz <topology-file> <map-file> <spine-file> <output-file>
    iptopviz -h | --help
    iptopviz --version
"""

import docopt
import re


def read_topology(topology_file):
    global mapdict, spinedict
    topology = {}
    current_node = ""
    with open(topology_file, mode='r', buffering=1) as f:
        for line in f:
            line = line.strip()
            if line:
                # Read the name of nodes and the number of ports (Switches or HCAs)
                m = re.search("^(\w+)\s+(\d+)\s+\"(.+?)\"\s+#\s+\"(.+?)\"", line)
                if m:
                    current_node = m.groups()[2]
                    topology[current_node] = {}
                    topology[current_node]['number_of_ports'] = int(m.groups()[1])
                    topology[current_node]['label'] = m.groups()[3]
                    if m.groups()[0] == 'Switch':
                        topology[current_node]['node_type'] = 'switch'
                        # mark if switch is a spine one
                        if current_node in spinedict:
                            topology[current_node]['switch_type'] = 'spine'
                        else:
                            topology[current_node]['switch_type'] = ''
                    else:
                        topology[current_node]['node_type'] = 'hca'
                        # if hca in mapfile, use hostname
                        if current_node in mapdict.keys():
                            hostname = mapdict[current_node]
                            label = hostname + " " + m.groups()[3].split()[0]
                            topology[current_node]['label'] = label
                    topology[current_node]['ports'] = []
                # Read the port lines
                m = re.search("^\[(\d+)\].*?\"(.+?)\"\[(\d+)\]", line)
                if m:
                    local_port = int(m.groups()[0])
                    remote = m.groups()[1]
                    remote_port = int(m.groups()[2])
                    # add speed2weight (and color)
                    weight, color = speed2weight(line.split()[-1])
                    topology[current_node]['ports'].append(
                        (local_port, remote, remote_port, weight, color))
    return topology


def speed2weight(speed):
    """Convert an IB speed to an edge weight
    Copyright (C) 2013-2020  Janne Blomqvist
    from ibtopotool, MPL2 license
    See e.g. https://en.wikipedia.org/wiki/InfiniBand

    """
    ss = speed.split('x')
    nlinks = int(ss[0])
    s1 = ss[1]
    if s1 == 'SDR':
        s = 2
        color = 'red'
    elif s1 == 'DDR':
        s = 4
        color = 'red'
    elif s1 == 'QDR':
        s = 8
        color = 'blue'
    elif s1 == 'FDR10':
        s = 8  # like QDR, at best
        color = 'red'
    elif s1 == 'FDR':
        s = 13.64
        color = 'green'
    elif s1 == 'EDR':
        s = 24.24
        color = 'green'
    elif s1 == 'HDR':
        s = 50  # roughly??
        color = 'green'
    elif s1 == 'NDR':
        s = 100  # roughly?
        color = 'green'
    elif s1 == 'XDR':
        s = 250  # the future?
        color = 'green'
    else:
        raise NotImplementedError('Support for Infiniband speed %s not implemented' % s1)
    return (nlinks * s, color)


def node_label(label, number_of_ports):
    label = re.sub(r"[;: ]+", "\\\\n", label)
    # port_range = range(1, number_of_ports + 1)
    for i in range(number_of_ports // 2):
        # add .zfill for better alignement
        odd = i * 2 + 1
        even = i * 2 + 2
        label += "|{{<{}>{}|<{}>{}}}".format(odd, str(odd).zfill(2), even, str(even).zfill(2))
    if number_of_ports % 2 == 1:
        label += "|<{0}>{0}".format(number_of_ports)
    return label


def read_map(map_file):
    """ Generate a dict {'GUID': 'hostname'} from the map file"""
    d = {}
    with open(map_file, 'r') as f:
        for line in f:
            l = line.strip()
            if l.startswith('#') or len(l) == 0:
                continue
            (key, val) = line.split()
            d[key] = val
    return d


def read_spine(spine_file):
    """Generate a list ['GUID'] of spine switchs from the spine file"""
    sl = []
    with open(spine_file, 'r') as f:
        for line in f:
            l = line.strip()
            if l.startswith('#') or len(l) == 0:
                continue
            sl.append(l)
    return sl


def write_dot_file(topology, dot_file):
    with open(dot_file, mode='w') as f:
        # +rankdir="LR", splines="ortho" <- causes problems with shape="record"
        f.write('digraph ibTopology {\ngraph [rankdir="LR", splines="ortho"];\n')

        # nodes
        for node in topology.keys():
            node_info = topology[node]
            # FIXME: (willdo) try to remake node_label() with HTML-like
            label = node_label(node_info['label'], node_info['number_of_ports'])
            node_type = node_info['node_type']
            if node_type == "switch":
                if node_info['switch_type'] == 'spine':
                    attr = {
                        "color": "orange",
                        "fillcolor": "darkorange",
                        "style": "filled",
                        "rank": "0",
                        "root": "true",
                        "shape": "record",
                    }
                else:
                    attr = {
                        "color": "blue",
                        "fillcolor": "cyan",
                        "style": "filled",
                        "rank": "1",
                        "shape": "record",
                    }
            else: # hca
                attr = {
                    "color": "grey",
                    "rank": "2",
                    "shape": "record",
                }
            attr["label"] = label
            attr_str = ", ".join(["{}=\"{}\"".format(k,v) for (k,v) in attr.items()])
            f.write('  "{}" [{}];\n'.format(node, attr_str))

        # spines: same rank
        f.write('{rank="min" ;\n')
        for node in topology.keys():
            node_info = topology[node]
            if node_info['node_type'] == "switch":
                if node_info['switch_type'] == 'spine':
                    f.write(' "{}" ;\n'.format(node))
        f.write('};\n')
        # other switchs, not spines
        f.write('{rank="same" ;\n')
        for node in topology.keys():
            node_info = topology[node]
            if node_info['node_type'] == "switch":
                if node_info['switch_type'] != 'spine':
                    f.write(' "{}" ;\n'.format(node))
        f.write('};\n')
        # then hosts
        f.write('{rank="max" ;\n')
        for node in topology.keys():
            node_info = topology[node]
            if node_info['node_type'] == "hca":
                f.write(' "{}" ;\n'.format(node))
        f.write('};\n')

        # edges
        for node in topology.keys():
            ports = topology[node]['ports']
            node_type = topology[node]['node_type']
            for (local_port, remote, remote_port, weight, color) in ports:
                remote_type = topology[remote]['node_type']
                # color = "gray"
                if node_type == "switch" and remote_type == "switch":
                    color = "darkgreen"
                # only one edge per connection
                if node + " " + str(local_port) < remote + " " + str(remote_port):
                    f.write('  "{}":{} -> "{}":{} [color={}, arrowhead="dot", weight={}];\n'.format(
                        node, local_port, remote, remote_port, color, weight))
        f.write("}\n")


if __name__ == "__main__":
    global mapdict, spinedict
    arg = docopt.docopt(__doc__, version="0.1")
    mapdict = read_map(arg["<map-file>"])
    spinedict = read_spine(arg["<spine-file>"])
    topology = read_topology(arg["<topology-file>"])
    write_dot_file(topology, arg["<output-file>"])
